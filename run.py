import subprocess
import time
import sys
import os
import logging
import glob

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    try:
        import fastapi, streamlit, openai, pandas, sklearn
        logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r requirements.txt")
        return False

def find_data_files():
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏"""
    db_files = glob.glob("*.db") + glob.glob("data/*.db")
    csv_files = [f for f in glob.glob("*.csv") + glob.glob("data/*.csv") if "feedback" not in f.lower()]
    
    return db_files, csv_files

def run_system():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Support AI System –≤ Docker...")
    print("=" * 60)
    
    if not check_dependencies():
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    db_files, csv_files = find_data_files()
    
    if db_files:
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {', '.join(db_files)}")
    if csv_files:
        logger.info(f"–ù–∞–π–¥–µ–Ω—ã CSV —Ñ–∞–π–ª—ã: {', '.join(csv_files)}")
    
    if not db_files and not csv_files:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö (.db –∏–ª–∏ .csv)")
        logger.info("–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π (.db) –∏–ª–∏ CSV —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é data/ –∏–ª–∏ —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
        logger.info("–ú–æ–Ω—Ç–∏—Ä—É–π—Ç–µ volume —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Docker")
        return
    
    if csv_files and not db_files:
        logger.info("üÜï –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–∞")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∫–µ–Ω–¥ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    logger.info("üîß –ó–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥–∞ FastAPI...")
    backend_process = subprocess.Popen([
        sys.executable, "backend.py"
    ])
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–µ–∫–µ–Ω–¥–∞ (–¥–æ–ª—å—à–µ –µ—Å–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –±–∞–∑–∞)
    wait_time = 15 if csv_files and not db_files else 8
    logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–µ–∫–µ–Ω–¥–∞ ({wait_time}—Å–µ–∫)...")
    time.sleep(wait_time)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
    logger.info("üñ•Ô∏è –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ Streamlit...")
    frontend_process = subprocess.Popen([
        "streamlit", "run", "frontend.py", 
        "--server.port", "8501",
        "--server.headless", "true",
        "--browser.gatherUsageStats", "false",
        "--server.address", "0.0.0.0"
    ])
    
    print("=" * 60)
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!")
    print("üåê –§—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8501")
    print("üîó API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8222")
    print("üìä –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8222/docs")
    print("")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        backend_process.wait()
        frontend_process.wait()
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        backend_process.terminate()
        frontend_process.terminate()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    run_system()