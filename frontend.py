import streamlit as st
import requests
import pandas as pd
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Support AI System",
    page_icon="üêó",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 10px;
        color: white;
    }
    .section-header {
        font-size: 1.4rem;
        color: #2e86ab;
        margin: 1.5rem 0 1rem 0;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #2e86ab;
    }
    .entity-box {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 4px solid #2e86ab;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .search-result {
        background: #e8f4f8;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 4px solid #ff6b6b;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .final-answer {
        background: #d4edda;
        padding: 1.5rem;
        border-radius: 10px;
        border-left: 4px solid #28a745;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        white-space: pre-line;
        line-height: 1.6;
        margin-bottom: 2rem;
    }
    .metric-box {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border: 1px solid #e0e0e0;
    }
    .thumbs-btn {
        font-size: 2rem;
        background: none;
        border: none;
        cursor: pointer;
        margin: 0 0.5rem;
        transition: transform 0.2s;
    }
    .thumbs-btn:hover {
        transform: scale(1.2);
    }
    .timing-box {
        background: #fff3cd;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #ffc107;
        margin: 1rem 0;
    }
    .timing-item {
        display: flex;
        justify-content: space-between;
        margin: 0.3rem 0;
        padding: 0.2rem 0;
    }
    .timing-value {
        font-weight: bold;
        color: #d35400;
    }
</style>
""", unsafe_allow_html=True)

API_BASE = "http://localhost:8222"

def init_session_state():
    if 'processed_data' not in st.session_state:
        st.session_state.processed_data = None
    if 'feedback_submitted' not in st.session_state:
        st.session_state.feedback_submitted = False
    if 'top_k' not in st.session_state:
        st.session_state.top_k = 3  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def process_question(question, top_k):
    try:
        response = requests.post(f"{API_BASE}/process", json={"question": question, "top_k": top_k})
        if response.status_code == 200:
            return response.json()
        else:
            st.error(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return None

def submit_feedback(question, answer, category, subcategory, rating):
    try:
        feedback_data = {
            "question": question,
            "answer": answer,
            "category": category,
            "subcategory": subcategory,
            "rating": rating
        }
        response = requests.post(f"{API_BASE}/feedback", json=feedback_data)
        return response.status_code == 200
    except:
        return False

def get_feedback_stats():
    try:
        response = requests.get(f"{API_BASE}/feedback/stats")
        if response.status_code == 200:
            return response.json()
        return None
    except:
        return None

def main():
    init_session_state()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<div class="main-header">üêó Support AI System</div>', unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞")
        
        # –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        top_k = st.slider(
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            min_value=2,
            max_value=5,
            value=st.session_state.top_k,
            help="–ú–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–π - –±—ã—Å—Ç—Ä–µ–µ –ø–æ–∏—Å–∫, –±–æ–ª—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–π - —Ç–æ—á–Ω–µ–µ –æ—Ç–≤–µ—Ç"
        )
        st.session_state.top_k = top_k
        
        st.markdown("---")
        st.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        
        stats = get_feedback_stats()
        if stats:
            col1, col2 = st.columns(2)
            with col1:
                st.metric("–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤", stats['total_feedback'])
            with col2:
                st.metric("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å", f"{stats['positive_percentage']}%")
            
            col3, col4 = st.columns(2)
            with col3:
                st.metric("üëç –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ", stats['positive'])
            with col4:
                st.metric("üëé –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ", stats['negative'])
        else:
            st.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
        
        st.header("üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
        examples = [
            "–ì–¥–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É MORE?",
            "–ö–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—É—é –∫–∞—Ä—Ç—É?",
            "–ö–∞–∫–∞—è –∫–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏?",
            "–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤—ã–ø–∏—Å–∫—É –ø–æ —Å—á–µ—Ç—É?",
            "–ö–∞–∫–∏–µ –ª–∏–º–∏—Ç—ã –Ω–∞ —Å–Ω—è—Ç–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö?"
        ]
        
        for example in examples:
            if st.button(example, use_container_width=True):
                st.session_state.question_input = example
                st.rerun()
        
        st.markdown("---")
        st.info("""
        **–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
        - üöÄ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
        - üéØ –¢–æ—á–Ω—ã–π –ø–æ–¥–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –±–∞–∑—ã
        - ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        - ‚è±Ô∏è –î–µ—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
        """)

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([3, 1])
    
    with col1:
        # –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
        question = st.text_area(
            "üí¨ **–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞:**",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ì–¥–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É MORE? –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç? –∏ —Ç.–¥.",
            height=100,
            key="question_input"
        )
        
        col_btn1, col_btn2, col_btn3 = st.columns([1, 1, 4])
        with col_btn1:
            if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å", use_container_width=True, type="primary"):
                if question.strip():
                    with st.spinner(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å (–∏—â—É {top_k} –ø–æ—Ö–æ–∂–∏—Ö)..."):
                        result = process_question(question, top_k)
                        if result:
                            st.session_state.processed_data = result
                            st.session_state.feedback_submitted = False
                            st.rerun()
                else:
                    st.warning("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
        
        with col_btn2:
            if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å", use_container_width=True):
                st.session_state.processed_data = None
                st.session_state.feedback_submitted = False
                st.rerun()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.session_state.processed_data:
        data = st.session_state.processed_data
        
        st.markdown("---")
        
        # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
        if data.get('timing'):
            timing = data['timing']
    
            # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            timing_text = f"‚è±Ô∏è –í—Ä–µ–º—è: –æ–±—â–µ–µ {timing.get('total', data.get('processing_time', 0)):.1f}—Å"
            if 'classification' in timing:
                timing_text += f" | –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (bge + qwen) {timing['classification']:.1f}—Å"
            if 'search' in timing:
                timing_text += f" | –ø–æ–∏—Å–∫ {timing['search']:.1f}—Å" 
            if 'generation' in timing:
                timing_text += f" | –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (qwen) {timing['generation']:.1f}—Å"

            st.info(timing_text)
        
        
        
            if 'error' in data:
                st.error(f"‚ùå **–û—à–∏–±–∫–∞:** {data['error']}")
                return
        
        # –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢ - –í –°–ê–ú–û–ú –í–ï–†–•–£!
        if data.get('assistant_response'):
            st.markdown("### üí° –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
            st.markdown('<div class="final-answer">', unsafe_allow_html=True)
            st.write(data['assistant_response'])
            st.markdown('</div>', unsafe_allow_html=True)
            
            # –ö–Ω–æ–ø–∫–∏ —Ñ–∏–¥–±–µ–∫–∞ —Å—Ä–∞–∑—É –ø–æ–¥ –æ—Ç–≤–µ—Ç–æ–º
            if not st.session_state.feedback_submitted:
                st.markdown("### üëçüëé –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞")
                col1, col2, col3 = st.columns([1, 1, 8])
                
                classification = data['entities_result'].get('classification', {})
                
                with col1:
                    if st.button("üëç –•–æ—Ä–æ—à–æ", use_container_width=True, type="secondary"):
                        if submit_feedback(
                            data['user_question'],
                            data['assistant_response'],
                            classification.get('main_category', 'Unknown'),
                            classification.get('subcategory', 'Unknown'),
                            1
                        ):
                            st.session_state.feedback_submitted = True
                            st.success("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤!")
                            st.rerun()
                
                with col2:
                    if st.button("üëé –ü–ª–æ—Ö–æ", use_container_width=True, type="secondary"):
                        if submit_feedback(
                            data['user_question'],
                            data['assistant_response'],
                            classification.get('main_category', 'Unknown'),
                            classification.get('subcategory', 'Unknown'),
                            -1
                        ):
                            st.session_state.feedback_submitted = True
                            st.info("üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ë—É–¥–µ–º —É–ª—É—á—à–∞—Ç—å —Å–∏—Å—Ç–µ–º—É.")
                            st.rerun()
            else:
                st.success("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        st.markdown("### üîç –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        if data.get('entities_result'):
            entities = data['entities_result'].get('entities', {})
            classification = data['entities_result'].get('classification', {})
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("#### üè∑Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏")
                with st.container():
                    st.markdown('<div class="entity-box">', unsafe_allow_html=True)
                    
                    if entities.get('products'):
                        st.write("**üí≥ –ü—Ä–æ–¥—É–∫—Ç—ã:**")
                        for product in entities['products']:
                            st.write(f" - {product}")
                    
                    if entities.get('actions'):
                        st.write("**‚ö° –î–µ–π—Å—Ç–≤–∏—è:**")
                        for action in entities['actions']:
                            st.write(f" - {action}")
                    
                    if entities.get('problems'):
                        st.write("**üö® –ü—Ä–æ–±–ª–µ–º—ã:**")
                        for problem in entities['problems']:
                            st.write(f" - {problem}")
                    
                    if entities.get('objects'):
                        st.write("**üè¢ –û–±—ä–µ–∫—Ç—ã:**")
                        for obj in entities['objects']:
                            st.write(f" - {obj}")
                    
                    if not any(entities.values()):
                        st.write("‚ÑπÔ∏è –°—É—â–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                    
                    st.markdown('</div>', unsafe_allow_html=True)
            
            with col2:
                st.markdown("#### üìä –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è")
                with st.container():
                    st.markdown('<div class="entity-box">', unsafe_allow_html=True)
                    st.write(f"**üìÇ –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {classification.get('main_category', 'N/A')}")
                    st.write(f"**üìÅ –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {classification.get('subcategory', 'N/A')}")
                    st.write(f"**üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {classification.get('confidence', 0):.3f}")
                    st.write(f"**üí° –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:** {classification.get('reasoning', 'N/A')}")
                    st.markdown('</div>', unsafe_allow_html=True)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        if data.get('search_results'):
            st.markdown(f"#### üìö –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã ({len(data['search_results'])} –∏–∑ {st.session_state.top_k})")
            for i, result in enumerate(data['search_results'], 1):
                with st.container():
                    st.markdown('<div class="search-result">', unsafe_allow_html=True)
                    st.write(f"**{i}. üìà –°—Ö–æ–∂–µ—Å—Ç—å: {result.get('similarity', 0):.3f}**")
                    st.write(f"**üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {result.get('category', 'N/A')} ‚Üí {result.get('subcategory', 'N/A')}")
                    st.write(f"**‚ùì –í–æ–ø—Ä–æ—Å:** {result.get('example_question', 'N/A')}")
                    st.write(f"**üí° –û—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã:** {result.get('template_answer', 'N/A')}")
                    st.markdown('</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()